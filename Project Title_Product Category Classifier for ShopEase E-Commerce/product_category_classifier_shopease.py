# -*- coding: utf-8 -*-
"""Product_Category_Classifier_ShopEase.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15J4pSUwHV-AEeqzQBbCz6DGkzIKHQaPK

# üõçÔ∏è Product Category Classifier for ShopEase E-Commerce
This project builds an Artificial Neural Network (ANN) to classify product descriptions into categories like clothing, electronics, etc.
"""

from google.colab import files
uploaded = files.upload()

# üì¶ Import Required Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical

from sklearn.feature_extraction.text import TfidfVectorizer

# üìÅ Load Dataset in Colab
from google.colab import files
uploaded = files.upload()

import io
filename = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[filename]))
df.head()

# üìä Explore Data
df.info()
df.isnull().sum()
df['target_category'].value_counts()

# ‚úÖ Preprocess Data

# Fill missing values in 'description' column
df['description'] = df['description'].fillna("")

# Encode the target categories
le = LabelEncoder()
df['categoryEncoded'] = le.fit_transform(df['target_category'])

# Convert descriptions to TF-IDF vectors
tfidf = TfidfVectorizer(max_features=5000)
x = tfidf.fit_transform(df['description']).toarray()

# One-hot encode target labels
y = to_categorical(df['categoryEncoded'])

# Split into train and test
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Build ANN Model
model = Sequential()
model.add(Dense(256, input_shape=(x.shape[1],), activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(y.shape[1], activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

# üöÇ Train Model
history = model.fit(x_train, y_train, epochs=10, batch_size=64, validation_data=(x_test, y_test))

# üìà Evaluate Model
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.legend()
plt.title("Model Accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.show()

# Use lowercase x_test and y_test as defined earlier
y_pred = model.predict(x_test)
y_pred_labels = np.argmax(y_pred, axis=1)
y_true_labels = np.argmax(y_test, axis=1)

# Generate classification report using label encoder
print(classification_report(y_true_labels, y_pred_labels, target_names=le.classes_))

# üíæ Save Model and Vectorizer
import joblib
from tensorflow.keras.models import save_model, load_model

# ‚úÖ Save the trained ANN model in modern .keras format
save_model(model, 'shopease_ann_model.keras')

# ‚úÖ Save TF-IDF Vectorizer
joblib.dump(tfidf, 'tfidf_vectorizer.pkl')

# ‚úÖ Save Label Encoder
joblib.dump(le, 'label_encoder.pkl')

# üß† Final Step: Prediction on New Customer Inquiry
# Input
new_text = ["I need help with my payment failure."]

# Vectorize and convert to array to avoid retracing issues
X_input = tfidf.transform(new_text).toarray()

# Predict
y_pred = model.predict(X_input)

# Decode label
predicted_label = le.inverse_transform([y_pred.argmax(axis=1)[0]])[0]

print("Input:", new_text[0])
print("Predicted Category:", predicted_label)